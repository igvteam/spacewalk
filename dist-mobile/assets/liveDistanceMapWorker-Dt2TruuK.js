(function(){"use strict";function x(e,n){const t=e.x-n.x,r=e.y-n.y,a=e.z-n.z;return t*t+r*r+a*a}function D(e,n){return Math.sqrt(x(e,n))}self.addEventListener("message",({data:e})=>{if(e.traceOrEnsemble==="trace"){const n="Distance Map Worker - Update Trace Distance Array";console.time(n);const t=JSON.parse(e.verticesString),{maxDistance:r,distances:a}=u(e.traceLength,t);console.timeEnd(n);const c={traceOrEnsemble:e.traceOrEnsemble,workerDistanceBuffer:a,maxDistance:r};self.postMessage(c,[a.buffer])}else{const n="Distance Map Worker - Update Ensemble Distance Array";console.time(n);const t=JSON.parse(e.vertexListsString),{maxAverageDistance:r,averages:a}=p(e.traceLength,t);console.timeEnd(n);const c={traceOrEnsemble:e.traceOrEnsemble,workerDistanceBuffer:a,maxDistance:r};self.postMessage(c,[a.buffer])}},!1);const l=-1;function u(e,n){const t=new Float32Array(e*e);t.fill(l);const r=[],a=[];for(let s=0;s<n.length;s++)n[s].isMissingData===!0||(a.push(s),r.push(n[s]));let c=Number.NEGATIVE_INFINITY,o=new Set;for(let s=0;s<r.length;s++){const f=a[s],y=f*e+f;t[y]=0,o.add(s);for(let i=0;i<r.length;i++)if(o.has(i)===!1){const d=D(r[s],r[i]),m=a[i],E=f*e+m,v=m*e+f;t[E]=t[v]=d,c=Math.max(c,d)}}return{maxDistance:c,distances:t}}function p(e,n){const t=new Float32Array(e*e);t.fill(l);const r=new Int32Array(e*e);r.fill(0);for(let c of n){const{distances:o}=u(e,c);for(let s=0;s<o.length;s++)l===o[s]||(++r[s],l===t[s]?t[s]=o[s]:t[s]=t[s]+(o[s]-t[s])/r[s])}let a=Number.NEGATIVE_INFINITY;for(let c of t)a=Math.max(a,c);return{maxAverageDistance:a,averages:t}}})();
