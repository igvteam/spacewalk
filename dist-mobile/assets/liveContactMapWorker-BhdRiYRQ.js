(function(){"use strict";function k(n,e,t,s,h,c,i){if(h-s<=t)return;const o=s+h>>1;z(n,e,o,s,h,c,i),k(n,e,t,s,o-1,(1+c)%i,i),k(n,e,t,o+1,h,(1+c)%i,i)}function z(n,e,t,s,h,c,i){for(;h>s;){if(h-s>600){const f=h-s+1,u=t-s+1,w=Math.log(f),a=.5*Math.exp(2*w/3),p=.5*Math.sqrt(w*a*(f-a)/f)*(u-f/2<0?-1:1),g=Math.max(s,Math.floor(t-u*a/f+p)),b=Math.min(h,Math.floor(t+(f-u)*a/f+p));z(n,e,t,g,b,c,i)}const o=e[i*t+c];let l=s,r=h;for(A(n,e,s,t,i),e[i*h+c]>o&&A(n,e,s,h,i);l<r;){for(A(n,e,l,r,i),l++,r--;e[i*l+c]<o;)l++;for(;e[i*r+c]>o;)r--}e[i*s+c]===o?A(n,e,s,r,i):(r++,A(n,e,r,h,i)),r<=t&&(s=r+1),t<=r&&(h=r-1)}}function A(n,e,t,s,h){I(n,t,s),I(e,h*t+0,h*s+0),I(e,h*t+1,h*s+1),I(e,h*t+2,h*s+2)}function I(n,e,t){const s=n[e];n[e]=n[t],n[t]=s}function T(n,e,t,s,h,c,i,o,l,r){const f=[0,n.length-1,0],u=[];for(;f.length;){const w=f.pop(),a=f.pop(),p=f.pop();if(a-p<=l){for(let _=p;_<=a;_++){const d=e[r*_+0],D=e[r*_+1],L=e[r*_+2];d>=t&&d<=c&&D>=s&&D<=i&&L>=h&&L<=o&&u.push(n[_])}continue}const g=p+a>>1,b=e[r*g+0],m=e[r*g+1],v=e[r*g+2];b>=t&&b<=c&&m>=s&&m<=i&&v>=h&&v<=o&&u.push(n[g]);let S=(1+w)%r,M,y;switch(w){case 0:M=t<=b,y=c>=b;break;case 1:M=s<=m,y=i>=m;break;case 2:M=h<=v,y=o>=v;break}M&&(f.push(p),f.push(g-1),f.push(S)),y&&(f.push(g+1),f.push(a),f.push(S))}return u}function $(n,e,t,s,h,c,i,o){const l=[0,n.length-1,0],r=[],f=c*c;for(;l.length;){const u=l.pop(),w=l.pop(),a=l.pop();if(w-a<=i){for(let y=a;y<=w;y++)E(e[o*y+0],e[o*y+1],e[o*y+2],t,s,h)<=f&&r.push(n[y]);continue}const p=a+w>>1,g=e[o*p+0],b=e[o*p+1],m=e[o*p+2];E(g,b,m,t,s,h)<=f&&r.push(n[p]);let v=(1+u)%o,S,M;switch(u){case 0:S=t-c<=g,M=t+c>=g;break;case 1:S=s-c<=b,M=s+c>=b;break;case 2:S=h-c<=m,M=h+c>=m;break}S&&(l.push(a),l.push(p-1),l.push(v)),M&&(l.push(p+1),l.push(w),l.push(v))}return r}function E(n,e,t,s,h,c){const i=n-s,o=e-h,l=t-c;return i*i+o*o+l*l}class B{constructor({idList:e,points:t,getX:s,getY:h,getZ:c,nodeSize:i,ArrayType:o,axisCount:l}){this.nodeSize=i,this.points=t,this.axisCount=l;const r=t.length<65536?Uint16Array:Uint32Array;this.ids=e?e.slice(0):new r(t.length),this.coords=new o(t.length*l);for(let f=0;f<t.length;f++)e===void 0&&(this.ids[f]=f),this.coords[l*f+0]=s(t[f]),this.coords[l*f+1]=h(t[f]),this.coords[l*f+2]=c(t[f]);k(this.ids,this.coords,i,0,this.ids.length-1,0,l)}range(e,t,s,h,c,i){return T(this.ids,this.coords,e,t,s,h,c,i,this.nodeSize,this.axisCount)}within(e,t,s,h){return $(this.ids,this.coords,e,t,s,h,this.nodeSize,this.axisCount)}}self.addEventListener("message",({data:n})=>{const e="Contact Frequency Map Worker - Calculate Frequency Values";console.time(e);const t=new Float32Array(n.traceLength*n.traceLength),s=n.traceOrEnsemble==="trace"?[JSON.parse(n.verticesString)]:JSON.parse(n.vertexListsString);U(t,n.traceLength,s,n.distanceThreshold),console.timeEnd(e);const h={traceOrEnsemble:n.traceOrEnsemble,workerValuesBuffer:t};self.postMessage(h,[t.buffer])},!1);const O=-1;function U(n,e,t,s){n.fill(O);for(let h of t)V(n,e,h,s)}function V(n,e,t,s){const h=new Set,c=[],i=[];for(let l=0;l<t.length;l++)t[l].isMissingData===!0||(i.push(l),c.push(t[l]));const o=new B(J(c));for(let l=0;l<c.length;l++){const r=i[l],f=r*e+r;n[f]=1,h.add(l);const u=o.within(c[l].x,c[l].y,c[l].z,s).filter(w=>!h.has(w));if(u.length>0)for(let w of u){const a=i[w],p=r*e+a,g=a*e+r;p>n.length&&console.error(`xy ${p} is an invalid index for array of length ${n.length}`),g>n.length&&console.error(`yx ${g} is an invalid index for array of length ${n.length}`),n[p]=O===n[p]?1:1+n[p],n[g]=n[p]}}}function J(n){return{idList:n.map((e,t)=>t),points:n,getX:e=>e.x,getY:e=>e.y,getZ:e=>e.z,nodeSize:64,ArrayType:Float64Array,axisCount:3}}})();
